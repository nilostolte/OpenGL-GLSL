"vec3 circle(vec2 p, vec2 c, float r, float w, vec3 obj, vec3 bckg) {\n"
"    float x = p.x - c.x;\n"
"    float y = p.y - c.y;\n"
"    float d = x*x + y*y;\n"
"    float r2 = r*r;\n"
"    vec3 col = obj;\n"
"    if (d > r2) {\n"
"      col = bckg;\n"
"      if ( (d-r2) < (w*w) ) {\n"
"        float n = sqrt(d-r2);\n"
"        float v = smoothstep(0.,w, n);\n"
"        col = vec3(v*bckg.x+((1.-v)*obj.x), v*bckg.y+((1.-v)*obj.y), v*bckg.z+((1.-v)*obj.z));\n"
"      }\n"
"    }\n"
"    return col;    \n"
"}\n"
"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n"
"    vec2 uv = fragCoord/iResolution.y;\n"
"    float iy = 1.0/iResolution.y;\n"
"    float ar = iResolution.x * iy;\n"
"    vec3 bckg =  vec3(0.9,0.9,1.);\n"
"    vec3 obj = vec3(0.2, 0.5, 1.);\n"
"    vec2 c = vec2(0.5*ar, 0.5); \n"
"    float minr = 236.;\n"
"    float maxr = 768.;\n"
"    float maxpx = 26.;\n"
"    float minpx = 14.;\n"
"    float a = (maxpx - minpx) / (maxr - minr);\n"
"    float b = minpx - (a * minr);\n"
"    vec3 col = circle(uv, c, 0.35, a + iy*b, obj, bckg);\n"
"    fragColor = vec4(col,1.0);\n"
"}\n"
